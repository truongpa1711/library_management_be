package com.example.library_management_be.controller;

import com.example.library_management_be.dto.BaseResponse;
import com.example.library_management_be.dto.request.FeedbackRequest;
import com.example.library_management_be.dto.response.FeedbackResponse;
import com.example.library_management_be.service.FeedbackService;
import jakarta.validation.Valid;
import org.springframework.http.ResponseEntity;
import org.springframework.security.access.prepost.PreAuthorize;
import org.springframework.security.core.Authentication;
import org.springframework.web.bind.annotation.*;

@RestController
@RequestMapping("/api/feedbacks")
public class FeedbackController {
    private final FeedbackService feedbackService;

    public FeedbackController(FeedbackService feedbackService) {
        this.feedbackService = feedbackService;
    }

    @PostMapping
    @PreAuthorize("hasRole('USER')")
    public ResponseEntity<BaseResponse<FeedbackResponse>> createFeedback(@RequestBody @Valid FeedbackRequest dto, Authentication auth) {
        return ResponseEntity.ok(feedbackService.createFeedback(dto, auth));
    }

//    @PostMapping("/admin")
//    @PreAuthorize("hasRole('ADMIN')")
//    public ResponseEntity<BaseResponse<FeedbackResponse>> createFeedbackByAdmin(@RequestBody @Valid FeedbackRequest dto, Authentication auth) {
//        return ResponseEntity.ok(feedbackService.createFeedbackByAdmin(dto, auth));
//    }

//    @GetMapping("/book/{bookId}")
//    @PreAuthorize("hasRole('USER') or hasRole('ADMIN')")
//    public ResponseEntity<BaseResponse<FeedbackResponse>> getFeedbackByBookId(@PathVariable Long bookId, Authentication auth) {
//        return ResponseEntity.ok(feedbackService.getFeedbackByBookId(bookId, auth));
//    }
    /*üìå 2. L·∫•y t·∫•t c·∫£ feedback c·ªßa m·ªôt quy·ªÉn s√°ch
h
Sao ch√©p
Ch·ªânh s·ª≠a
GET /api/feedbacks/book/{bookId}
Tr·∫£ v·ªÅ list FeedbackResponse

D√πng ƒë·ªÉ hi·ªÉn th·ªã khi user ·∫•n v√†o m·ªôt quy·ªÉn s√°ch

C√≥ th·ªÉ th√™m ph√¢n trang:

http
Sao ch√©p
Ch·ªânh s·ª≠a
GET /api/feedbacks/book/{bookId}?page=0&size=10
üìå 3. Admin tr·∫£ l·ªùi feedback
http
Sao ch√©p
Ch·ªânh s·ª≠a
PATCH /api/feedbacks/{id}/reply
Body: { "reply": "C·∫£m ∆°n b·∫°n ƒë√£ g√≥p √Ω!" }

Role: ADMIN

C·∫≠p nh·∫≠t reply, repliedDate, status = RESOLVED

üìå 4. User c·∫≠p nh·∫≠t feedback c·ªßa ch√≠nh m√¨nh
h
Sao ch√©p
Ch·ªânh s·ª≠a
PUT /api/feedbacks/{id}
Y√™u c·∫ßu: gi·ªëng FeedbackRequest

Ki·ªÉm tra isEditable == true v√† user == auth.getName()

Role: USER

üìå 5. User x√≥a feedback c·ªßa ch√≠nh m√¨nh
http
Sao ch√©p
Ch·ªânh s·ª≠a
DELETE /api/feedbacks/{id}
Role: USER

Ch·ªâ cho ph√©p x√≥a n·∫øu isEditable == true v√† user == auth.getName()

üìå 6. Admin xem t·∫•t c·∫£ feedback (qu·∫£n tr·ªã)
http
Sao ch√©p
Ch·ªânh s·ª≠a
GET /api/feedbacks
C√≥ filter: status=PENDING, bookTitle, userEmail, etc.

Role: ADMIN

Ph√¢n trang, s·∫Øp x·∫øp

üìå 7. Th·ªëng k√™ (tu·ª≥ ch·ªçn)
http
Sao ch√©p
Ch·ªânh s·ª≠a
GET /api/feedbacks/statistics
V√≠ d·ª•: top 5 s√°ch c√≥ nhi·ªÅu feedback nh·∫•t, trung b√¨nh rating, s·ªë feedback theo tr·∫°ng th√°i...*/
}
